#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('goal:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var usersToSockets = {};
var socketsToUser = {};

// Create the socket io connection
var io = require('socket.io')(server);

io.on('connection', function(socket) {
	console.log("User Connected");
	
	// When a user logs in, keep a recod of who they logged in as
	socket.on('loggedin', function(data) {
		if (usersToSockets[data.username] === undefined) {
			usersToSockets[data.username] = [];
		}
		
		usersToSockets[data.username].push(socket.id);
		console.log(usersToSockets[data.username]);
		socketsToUser[socket.id] = data.username;
	});
			  
	// When the user logs out then we want to remove them from the list
	// of users
	socket.on('loggedout', function() {
		var username = socketsToUser[socket.id];
		if (username === undefined) {
			return;
		}
		
		socketsToUser[socket.id] = undefined;		usersToSockets[username].splice(usersToSockets[username].indexOf(socket.id), 1);
	
	});
	
	
	socket.on('updated', function(data) {
		var users = usersToSockets[data.username];
		if (users.lenght != 0) {
			for (var i = 0; i < users.length; i++) {
				io.to(users[i]).emit('update');
			}
		}
		
		//io.sockets.emit('update');
	});
	
	
	// When a user disconnects we want to remove them from the users list
	socket.on('disconnect', function() {
		var username = socketsToUser[socket.id];
		if (username === undefined) {
			return;
		}
		
		console.log(usersToSockets[username]);
		socketsToUser[socket.id] = undefined;
		
		usersToSockets[username].splice(usersToSockets[username].indexOf(socket.id), 1);
	});
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
